function [triggerTime,repeats,stimuliNum, startBsl, endBsl] = stimulationTiming(varargin)
%STIMULATIONTIMING Returns the time (in seconds) of a cycle - i.e. trigger timing.
%   Input 'mode' as either 'Flip', 'D', 'DH', 'HD', 'HDH'
%   Input timings as property name/value pairs
%
%  e.g. triggerTime=stimulationTiming('DH', 'driftTime', '2', ...
%                   'postDriftHoldTime', 1.5);
%
%   change default values here to match those in VisStimAlex; you can then
%   get the default trigger times by simply calling stimulationTiming(mode)

p=inputParser;
%----------- Program  Setup ---------------------------------

% Whether or not to wait for keypresses at the beginning and end. Default
% is not to (0)
p.addParamValue('keyWait', 0)

% Whether or not to clear the screen at the end. Default is yes (1)
p.addParamValue('screenClear', 1)

% --------------- Configuration Variables ---------------------------------


%%%%Experiment mode%%%%%%
% If you leave all configuration parameters alone, you can switch what
% stimulus you are using by specifying mode here.
%
% Flip: Screen flips between a total white rectangle and blackness. Useful
%       for maximal stimulation and assessing optical noise
% D:    Dynamic grating of fixed spatial and temporal frequency (specified as
%       parameters below) but changing orientation. 
%       randomisation mode and number of repeats in each run
% DH:   Dynamic grating followed by a hold, both at the same orientation,
%       then on to the next orientation 
% HDH:  Hold then dynamic then hold, all at the same orientation, then on 
%       to the next orientation. 
% Ret: Retinotopy stimulus
p.addParamValue('experimentType', 'HD');

% testing mode:
%0 turns off testing mode (assumes DAQ toolbox present, running on windows) 
%1 turns testing mode on - do not initialise DIO. Requires a function called 
%    getvalue to simulate trigger input (simple version just returns true every
%    n seconds). This can just be false all the time too - in which case
%    trigger only works by keypresses.
%2 as 1, but with more verbose output from PTB  
p.addParamValue('testingMode', 0)

% If triggering is 'off', the stimulus will be generated by timings specified
% below. If it is 'on', state changes will occur on a trigger from the
% acquisition computer. Triggers only occur once per cycle, so state
% changes within a cycle (e.g. drift -> hold in DH) are carried out after a
% specified time. See individual functions for more details.

p.addParamValue('triggering', 'off');

% photoDiode 'on' will display a patch for photodiode readout. 'off' means
% no patch will be displayed
p.addParamValue('photoDiode', 'on');

% add a default save path. This is safest. All timestamped stimulus files
% will be saved here. To save a different directory, pass that directory
% in. To suppress saving, pass an empty string ('')
p.addParamValue('filePath', 'C:\Users\Bruno\Documents\MATLAB\')


% Grating parameters:
p.addParamValue('gratingType', 0);                           % 0 creates sine grating, 1 creates square wave grating
p.addParamValue('spaceFreqDeg',0.05);                        % spatial frequency in cycles / degree
p.addParamValue('tempFreq',2);                               % temporal frequency in Hz
p.addParamValue('directionsNum',4);                          % Number of different directions to display

%Run parameters
p.addParamValue('baseLineTime', 2);
p.addParamValue('repeats', 2);                               % Number of repeats within each run
p.addParamValue('randMode', 3);                               % Randomisation of stimulus order. (not applicable to Flip)
                                            %             0 = orderly presentation (not recommended). 
                                            %             1 = random permutation, kept constant throughout one run
                                            %             2 = new random permutation on each repetition
                                            %             3 = maximally different directions 
                                                              
% Experiment type specific parameters
p.addParamValue('preDriftHoldTime', 1);                        % How long to hold the grating for, in seconds, before a drift
p.addParamValue('driftTime', 2);                              % How long to display a drifting grating for
p.addParamValue('postDriftHoldTime', 1);                    % How long to hold the grating for, in seconds, after a drift
p.addParamValue('flipTime', 0.5);                             % How long each state (white or black) should be displayed for in flipStimulus


% Screen parameters:
p.addParamValue('screenWidthCm', 56);                          % screen size in cm
p.addParamValue('mouseDistanceCm', 19);                       % mouse distance from the screen im cm

% Photodiode indicator patch settings
p.addParamValue('diodePatchXSize', 100);
p.addParamValue('diodePatchYSize', 100);

% Baseline parameters
p.addParamValue('startBsl',10);
p.addParamValue('endBsl',10);

% Retinotopy parameters
p.addParamValue('retinotopyType', 'D');                          %Which type of retinotopy to run:
                                                                                        %D = drifts
                                                                                        %Flip = flips
p.addParamValue('retinotopyRandMode', 0);                       % Same as randMode, but for the order of patch presentation
p.addParamValue('patchGridX', 6);
p.addParamValue('patchGridY', 4);

% Sparse Noise parameters
p.addParamValue('spotSizeMean', 10);
p.addParamValue('spotSizeStd', 5);
p.addParamValue('spotSizeMin', 5);
p.addParamValue('spotNumberMean', 8);
p.addParamValue('spotNumberStd', 1);
p.addParamValue('spotTime', 1);
p.addParamValue('nStimFrames', 300);

% --------------- System Parameters ---------------
% There should not, normally, be any reason for these to be changed.

%NI card parameters
p.addParamValue('inputLine', 3);
p.addParamValue('inputPort', 1);
p.addParamValue('deviceName','Dev1');

%-------------------------------------------------------------------------------------------------------------------------
p.parse(varargin{:});
q = p.Results;


switch q.experimentType
    case 'Flip'
        triggerTime=q.flipTime;
    case 'D'
        triggerTime=q.driftTime;
    case 'DH'
        triggerTime=q.driftTime+q.postDriftHoldTime;
    case 'HD'
        triggerTime=q.preDriftHoldTime+q.driftTime;
    case 'HDH'
        triggerTime=q.preDriftHoldTime+q.driftTime+q.postDriftHoldTime;
    case 'Ret'
        triggerTime=q.driftTime*q.directionsNum;
    case 'spn'
        triggerTime=q.spotTime;
end

%How many triggers we're going to need
if strcmp(q.experimentType, 'Ret')
    stimuliNum = q.patchGridX* q.patchGridY;
    repeats=q.repeats;
elseif strcmp(q.experimentType, 'spn')
    stimuliNum=q.nStimFrames;
    repeats=1;
else
    stimuliNum=q.directionsNum;
    repeats=q.repeats;
end


startBsl = q.startBsl;
endBsl = q.endBsl;
end
 
