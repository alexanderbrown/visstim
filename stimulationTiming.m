function [triggerTime,repeats,directionsNum] = stimulationTiming(varargin)
%STIMULATIONTIMING Returns the time (in seconds) of a cycle - i.e. trigger timing.
%   Input 'mode' as either 'Flip', 'D', 'DH', 'HD', 'HDH'
%   Input timings as property name/value pairs
%
%  e.g. triggerTime=stimulationTiming('DH', 'driftTime', '2', ...
%                   'postDriftHoldTime', 1.5);
%
%   change default values here to match those in VisStimAlex; you can then
%   get the default trigger times by simply calling stimulationTiming(mode)

p=inputParser;
% --------------- Configuration Variables ---------------------------------
p.addParamValue('keyWait', 0)
p.addParamValue('screenClear', 1)
%%%%Experiment mode%%%%%%
% If you leave all configuration parameters alone, you can switch what
% stimulus you are using by specifying mode here.
%
% Flip: Screen flips between a total white rectangle and blackness. Useful
%       for maximal stimulation and assessing optical noise
% D:    Dynamic grating of fixed spatial and temporal frequency (specified as
%       parameters below) but changing orientation. 
%       randomisation mode and number of repeats in each run
% DH:   Dynamic grating followed by a hold, both at the same orientation,
%       then on to the next orientation 
% HDH:  Hold then dynamic then hold, all at the same orientation, then on 
%       to the next orientation. 
p.addParamValue('experimentType', 'HDH');

% If triggering is 'off', the stimulus will be generated by timings specified
% below. If it is 'on', state changes will occur on a trigger from the
% acquisition computer. Triggers only occur once per cycle, so state
% changes within a cycle (e.g. drift -> hold in DH) are carried out after a
% specified time. See individual functions for more details.

p.addParamValue('triggering', 'on');

% photoDiode 'on' will display a patch for photodiode readout. 'off' means
% no patch will be displayed
p.addParamValue('photoDiode', 'on');


% Grating parameters:
p.addParamValue('gratingType', 0);                           % 0 creates sine grating, 1 creates square wave grating
p.addParamValue('spaceFreqDeg',0.05);                        % spatial frequency in cycles / degree
p.addParamValue('tempFreq',2);                               % temporal frequency in Hz
p.addParamValue('directionsNum',8);                          % Number of different directions to display

%Run parameters
p.addParamValue('baseLineTime', 5);
p.addParamValue('repeats', 5);                               % Number of repeats within each run
p.addParamValue('randMode', 1);                               % Randomisation of stimulus order. (not applicable to Flip)
                                            %             0 = orderly presentation (not recommended). 
                                            %             1 = random permutation, kept constant throughout one run
                                            %             2 = new random permutation on each repetition
                                                              
% Experiment type specific parameters
p.addParamValue('preDriftHoldTime', 1);                        % How long to hold the grating for, in seconds, before a drift
p.addParamValue('driftTime', 2);                              % How long to display a drifting grating for
p.addParamValue('postDriftHoldTime', 1);                    % How long to hold the grating for, in seconds, after a drift
p.addParamValue('flipTime', 1);                             % How long each state (white or black) should be displayed for in flipStimulus


% Screen parameters:
p.addParamValue('screenWidthCm', 56);                          % screen size in cm
p.addParamValue('mouseDistanceCm', 19);                       % mouse distance from the screen im cm

% Photodiode indicator patch settings
p.addParamValue('diodePatchXSize', 100);
p.addParamValue('diodePatchYSize', 100);

% --------------- System Parameters ---------------
% There should not, normally, be any reason for these to be changed.

%NI card parameters
p.addParamValue('inputLine', 3);
p.addParamValue('inputPort', 1);
p.addParamValue('deviceName','Dev1');

p.parse(varargin{:});
q = p.Results;

switch q.experimentType
    case 'Flip'
        triggerTime=q.flipTime;
    case 'D'
        triggerTime=q.driftTime;
    case 'DH'
        triggerTime=q.driftTime+q.postDriftHoldTime;
    case 'HD'
        triggerTime=q.preDriftHoldTime+q.driftTime;
    case 'HDH'
        triggerTime=q.preDriftHoldTime+q.driftTime+q.postDriftHoldTime;
end
directionsNum=q.directionsNum;
repeats=q.repeats;
end
 
